// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs = [
    {
        value: BigInt(1),
        abs: BigInt(1)
    },
    {
        value: BigInt(-2),
        abs: BigInt(2)
    },
    {
        value: BigInt('115922179551495973383410176342643722334557255682879605864838806293659619625004303206250384392546855063844106965156287951749387634112551089284595541103692716528774876311641700929986988023197242224581099872580798960693521778607396791006450968430359009613295725905514216842343121690916290236558767890728449777'),
        abs: BigInt('115922179551495973383410176342643722334557255682879605864838806293659619625004303206250384392546855063844106965156287951749387634112551089284595541103692716528774876311641700929986988023197242224581099872580798960693521778607396791006450968430359009613295725905514216842343121690916290236558767890728449777')
    },
    {
        value: BigInt('-918145944120889203205646923554374144932845997937845799234617798611046542304088105084854788397071323714642587188481158334265864050544813693415594035822877094557870151480865568334936301231664228940480803192289508235412296324312748621874408067955753620604885023289655277704554716080844406284392300643321715285709865081125252390440327650852470312931679380011885102491340191287595160450544053114365852338670819405357496612993587404998677760882578064637552397840566752638770525765833183986360029736508910848408875329873614164495552615086579144675027852136994842529623698055210822311666048300438808691619782893307972452223713060928388502843564836966586109748062827799521852219158489504529458627699284110902303538160168376473182639384638674469114371472053977558648090155686345760457454061117853710619580819749222459422610617170567016772342291486643520567969321969827786373531753524990712622940069883277763528926899970596407140603912036918433859986491820017690762751824769335720368488097262208835708414085501930989486498185503469986946236128468697606998536541209764920494156326791142098506801288127033229779646920082892258428128572765585196779698362187479280520327053508580551167899837393726371144977951402741307021389967382422805567365901203'),
        abs: BigInt('918145944120889203205646923554374144932845997937845799234617798611046542304088105084854788397071323714642587188481158334265864050544813693415594035822877094557870151480865568334936301231664228940480803192289508235412296324312748621874408067955753620604885023289655277704554716080844406284392300643321715285709865081125252390440327650852470312931679380011885102491340191287595160450544053114365852338670819405357496612993587404998677760882578064637552397840566752638770525765833183986360029736508910848408875329873614164495552615086579144675027852136994842529623698055210822311666048300438808691619782893307972452223713060928388502843564836966586109748062827799521852219158489504529458627699284110902303538160168376473182639384638674469114371472053977558648090155686345760457454061117853710619580819749222459422610617170567016772342291486643520567969321969827786373531753524990712622940069883277763528926899970596407140603912036918433859986491820017690762751824769335720368488097262208835708414085501930989486498185503469986946236128468697606998536541209764920494156326791142098506801288127033229779646920082892258428128572765585196779698362187479280520327053508580551167899837393726371144977951402741307021389967382422805567365901203')
    }
];

describe('abs', function () {
    for (const input of inputs) {
        describe(`abs(${input.value})`, function () {
            it(`should return ${input.abs}`, function () {
                const ret = bigintCryptoUtils.abs(input.value);
                chai.expect(ret).to.equal(input.abs);
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$1 = [
    {
        value: BigInt(1),
        bitLength: 1
    },
    {
        value: BigInt(7),
        bitLength: 3
    },
    {
        value: BigInt(8),
        bitLength: 4
    },
    {
        value: BigInt(-2),
        bitLength: 2
    },
    {
        value: BigInt(11592217955149597331),
        bitLength: 64
    }
];

describe('bitLength', function () {
    for (const input of inputs$1) {
        describe(`bitLength(${input.value})`, function () {
            it(`should return ${input.bitLength}`, function () {
                const ret = bigintCryptoUtils.bitLength(input.value);
                chai.expect(ret).to.equal(input.bitLength);
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$2 = [
    {
        a: BigInt(1),
        b: BigInt(1),
        gcd: BigInt(1)
    },
    {
        a: BigInt(0),
        b: BigInt(189),
        gcd: BigInt(189)
    },
    {
        a: BigInt(189),
        b: BigInt(0),
        gcd: BigInt(189)
    },
    {
        a: BigInt(0),
        b: BigInt(0),
        gcd: BigInt(0)
    },
    {
        a: BigInt(1),
        b: BigInt('14546149867129487614601346814'),
        gcd: BigInt(1)
    },
    {
        a: BigInt(27),
        b: BigInt(18),
        gcd: BigInt(9)
    },
    {
        a: BigInt(-27),
        b: BigInt(18),
        gcd: BigInt(9)
    },
    {
        a: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109'),
        b: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109') * BigInt('144678545212641449725111562354371812236197961234111744040227045242578772124779004756249085154188369039159690638725821245974978963371615699005072473649705367893567309027634121825164880046600125480885803891136149601797439273507802533807541605261215613891134865916295914192271736572001975016089773532547481638243'),
        gcd: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109')
    }
];

describe('gcd', function () {
    for (const input of inputs$2) {
        describe(`gcd(${input.a}, ${input.b})`, function () {
            it(`should return ${input.gcd}`, function () {
                const ret = bigintCryptoUtils.gcd(input.a, input.b);
                chai.expect(ret).to.equal(input.gcd);
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const numbers = [
    {
        value: BigInt(1),
        prime: false
    },
    {
        value: BigInt(2),
        prime: true
    },
    {
        value: 3,
        prime: true
    },
    {
        value: BigInt(15),
        prime: false
    },
    {
        value: 29,
        prime: true
    },
    {
        value: BigInt('669483106578092405936560831017556154622901950048903016651289'),
        prime: true
    },
    {
        value: BigInt('2074722246773485207821695222107608587480996474721117292752992589912196684750549658310084416732550077'),
        prime: true
    },
    {
        value: BigInt('2074722246773485207821695222107608587480996474721117292752992589912196684750549658310084416732550079'),
        prime: false
    },
    {
        value: BigInt('115922179551495973383410176342643722334557255682879605864838806293659619625004303206250384392546855063844106965156287951749387634112551089284595541103692716528774876311641700929986988023197242224581099872580798960693521778607396791006450968430359009613295725905514216842343121690916290236558767890728449777'),
        prime: true
    },
    {
        value: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109') * BigInt('144678545212641449725111562354371812236197961234111744040227045242578772124779004756249085154188369039159690638725821245974978963371615699005072473649705367893567309027634121825164880046600125480885803891136149601797439273507802533807541605261215613891134865916295914192271736572001975016089773532547481638243'),
        prime: false
    },
    {
        value: BigInt('918145944120889203205646923554374144932845997937845799234617798611046542304088105084854788397071323714642587188481158334265864050544813693415594035822877094557870151480865568334936301231664228940480803192289508235412296324312748621874408067955753620604885023289655277704554716080844406284392300643321715285709865081125252390440327650852470312931679380011885102491340191287595160450544053114365852338670819405357496612993587404998677760882578064637552397840566752638770525765833183986360029736508910848408875329873614164495552615086579144675027852136994842529623698055210822311666048300438808691619782893307972452223713060928388502843564836966586109748062827799521852219158489504529458627699284110902303538160168376473182639384638674469114371472053977558648090155686345760457454061117853710619580819749222459422610617170567016772342291486643520567969321969827786373531753524990712622940069883277763528926899970596407140603912036918433859986491820017690762751824769335720368488097262208835708414085501930989486498185503469986946236128468697606998536541209764920494156326791142098506801288127033229779646920082892258428128572765585196779698362187479280520327053508580551167899837393726371144977951402741307021389967382422805567365901203'),
        prime: true
    },
    {
        value: BigInt('940719693126280825126763871881743336375040232953039527942717290104060740215493004508206768342926022549956464101136893240409560470269654765366248516968645294076406953865805712688760371102637642013723011744011617678651884521901163090779813242269935310225049805992299292275574585773507915278612311449919050091057023179541184986547995894821648553256021675133997240195429424258757033557367142630663053464438840832073753440939208165158795269598771598124509831433327480118038278887538430675994497384283550890544882369140852048496460551123626856255619494025370171790720106325655890348475483349150258338517508459674722099347335608814922179633411167540545786247819334838979610017735984374883325689517847175539632896026875016305529321705457954181425405794479825617747354596485074451489940385640535898876551301296003465792117006135339109817937663957519031436646579178503423889430062127572272773511424424297800355292430651838502733756881154935252456036638082486459287411002911323257940893413982671660332662880068976408321968046549017547143836993553556640198884769590214676797037397502067035957959952990027503148987727895561468097917730167320715053689862847457761993196945361244822787209076446259359976421264285658106819879849052247546957718175231'),
        prime: false
    }
];

describe('isProbablyPrime', function () {
    for (const num of numbers) {
        describe(`isProbablyPrime(${num.value})`, function () {
            it(`should return ${num.prime}`, async function () {
                const ret = await bigintCryptoUtils.isProbablyPrime(num.value);
                chai.expect(ret).to.equal(num.prime);
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$3 = [
    {
        a: BigInt(1),
        b: BigInt(1),
        lcm: BigInt(1)
    },
    {
        a: BigInt(1),
        b: BigInt('14546149867129487614601346814'),
        lcm: BigInt('14546149867129487614601346814')
    },
    {
        a: BigInt(27),
        b: BigInt(18),
        lcm: BigInt(27) * BigInt(2)
    },
    {
        a: BigInt(-27),
        b: BigInt(18),
        lcm: BigInt(27) * BigInt(2)
    },
    {
        a: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109'),
        b: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109') * BigInt('144678545212641449725111562354371812236197961234111744040227045242578772124779004756249085154188369039159690638725821245974978963371615699005072473649705367893567309027634121825164880046600125480885803891136149601797439273507802533807541605261215613891134865916295914192271736572001975016089773532547481638243'),
        lcm: BigInt('168694196579467171180863939518634764192343817610869919231900537093664715354591592262546800497540343203057121816378265655992490621138321114570420047522219942818258345349322155251835677199539229050711145144861404607171419723967136221126986330819362088262358855325306938646602003059377699727688477555163239222109') * BigInt('144678545212641449725111562354371812236197961234111744040227045242578772124779004756249085154188369039159690638725821245974978963371615699005072473649705367893567309027634121825164880046600125480885803891136149601797439273507802533807541605261215613891134865916295914192271736572001975016089773532547481638243'),
    }
];

describe('lcm', function () {
    for (const input of inputs$3) {
        describe(`lcm(${input.a}, ${input.b})`, function () {
            it(`should return ${input.lcm}`, function () {
                const ret = bigintCryptoUtils.lcm(input.a, input.b);
                chai.expect(ret).to.equal(input.lcm);
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$4 = [
    {
        a: BigInt(1),
        n: BigInt(19),
        modInv: BigInt(1)
    },
    {
        a: BigInt(2),
        n: BigInt(5),
        modInv: BigInt(3)
    },
    {
        a: BigInt(-2),
        n: BigInt(5),
        modInv: BigInt(2)
    },
    {
        a: BigInt(2),
        n: BigInt(4),
        modInv: NaN
    },
    {
        a: BigInt(1013),
        n: BigInt(1024),
        modInv: BigInt(93)
    }
];

describe('modInv', function () {
    for (const input of inputs$4) {
        describe(`modInv(${input.a}, ${input.n})`, function () {
            it(`should return ${input.modInv}`, function () {
                const ret = bigintCryptoUtils.modInv(input.a, input.n);
                // chai.assert( String(ret) === String(input.modInv) );
                chai.expect(String(ret)).to.be.equal(String(input.modInv));
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$5 = [
    {
        g: BigInt(4),
        e: BigInt(-1),
        m: BigInt(19),
        modPow: BigInt(5)
    },
    {
        g: BigInt(-5),
        e: BigInt(2),
        m: BigInt(7),
        modPow: BigInt(4)
    },
    {
        g: BigInt(2),
        e: BigInt(255),
        m: BigInt(64),
        modPow: BigInt(0)
    },
    {
        g: BigInt(3),
        e: BigInt(3),
        m: BigInt(25),
        modPow: BigInt(2)
    },
    {
        g: BigInt('2'),
        e: BigInt('10'),
        m: BigInt('1023'),
        modPow: BigInt('1')
    },
    {
        g: BigInt('2'),
        e: BigInt('128'),
        m: BigInt('340282366920938463463374607431768211455'),
        modPow: BigInt('1')
    },
    {
        g: BigInt('18'),
        e: BigInt('200'),
        m: BigInt('113370750249550604745292091968145836496593222544915456254424294090214656803829265088806897860919390278691594885690704522965220688091605288814511793200647764531655156263734134814096833745360631878996550663492553415503844632080541534071778400366940389371'),
        modPow: BigInt('5')
    },
    {
        g: BigInt('452149997592306202232720864363485824701879487303880767747217308770351197801836846325633986474037061753983278534192061455638289551714281047915315943771002615269860312318606105460307037327329178890486613832051027105330475852552183444938408408863970975090778239473049899109989825645608770309107015209564444316'),
        e: BigInt('313632271690673451924314047671460131678794095260951233878123501752357966284491455239133687519908410656818506813151659324961829045286402303082891913186909806785080978448037486178337722667190743610785429936585699831407575170854873682955317589189564880931807976657385223632835801016017549762825562427694700595'),
        m: BigInt('503920301461718841589267304263845359224454055603847417021399996422142529929535423886894599506329362009085557636432288745748144369296043048325513558512136442971686130986388589421125262751724362880217790112013162815676017250234401214198365302142787009943498370856167174244675719638815809347261773472114842037'),
        modPow: BigInt('116151033665657122493185787869806545202689299276386248795495327814334155060582848283813920809806733483932890630813383732570880648835941403266559981745292170093730444958664287150348638825646041123624934609342209607324573471488516182043623392135349935513599211751048985945264854946690735102886684991537356085')
    },
    {
        g: BigInt('11841935024364147716353320299341739746172519891965671690856511761865081119900229173686108717306066896171532380925613022558468135419569531408705599582485574759090606783343741354786730145579374943152051295610903329485954362785549544146607372955327416350026611939729169427564923964331600602513490664280385400363896503502618765510767404081687040998331391413380992872139563001129973563785491932737613134937848408559444512754094028193888934364360751954963910053047084765967986440762176806250300224273006224896155131567757418573065406225474586114429703299114459699487144564058284097113758170076484715508822046276851937344229994032299074549882379678277342210908690759551148001807924384828911534562173037482679758571511882241324466037988240844278798626364844736890608256926987106577360912025740735500279259884719582317874795989021225051547012005127160387041195943076115874004566418428286364513525338678717276611964848702181954630512848191062142396301410082041125076883572620522585524189957008997152113326270905908574824930439364294142561506869607441990637434011705058731047210767842283095833998881458174313018987516885015966730190851246509145996081186244452977612840231233975504254511906873635067423284474418010779'),
        e: BigInt(65537),
        m: BigInt('664696945209992458756686149346245451959976517638292928791700179256844281858185896099125067951952654402490086135552162143078899299811359837084271751151028163085460532259189536386314535196930287132524181089869416574933585854601187369425268075047954322131181886825614483567135422315378239368406529687890501058842464349082654178783249154514852387342368449159786841244102661841103091274080943628377889327373287942549931933940344234893839788400814498566635472921769540354411299285799802711867703483574544771980813294079644617078375407600316797552977237711658136574314463163234925711424649561555664033424194956707145914242094743912526316349196624502213586536538135869789635707369927717355832447046508211207481639911848541479454441364007603812247204467303083508820904250883393507217714190069793899396969055025331820102813163487922147786603563622819501665346051997106311026362529468828905149816662831114932006157324643497015674078299348822374197702985903910072842251175854608734890112310948483203483961426536448185519679528107211468599094104146030976001545010516921072850544164805486025720876961534563519564195975619474559646887965720356652237259589839928212094478013164459912910325366814653885115295888383834706100540709594519005127572401811'),
        modPow: BigInt('161536302965876859810326974717696098103400028325290400098009372420705842141606061937868139599254889552827198179700943830904638623242340901324168739379683610826318364033114567151761440476743429035585669319987243392873067886301931060535626608607104747706524265295724084154614882717640324951625739784886033546192235102457885887408101631405915966581111883511865128039796236163741845154646134946752753268709040854209729956504178887533788747747119724211698890580997678823386819800221402603296179505514972437060254830220689683909538655135024950098209110995272202278241518477093098370353714764725812198054783679272603305985540377409944139710135412033750841657291714011251536147009157592696923268320898824641942748639453777599991450459711759300887988978324145615092849769787050388971709612414990408313473964177698898938543373681132731816503192893237346062747275578792432555393605002601917267269068710962123252254945878806405012635482349703526986160866564599536586917650117294496046786249510075244065039160250373641752532225496475389831533373840552676329192759279134395710908869089593417334022492165553094734796332770913945001202427237115943860676216249286700909563116282282221663391416906533276082395469933511482736965528809555212759373890794')
    }
];

describe('modPow', function () {
    const ITERATIONS = 100;
    for (const input of inputs$5) {
        const method1 = 'Left-to-right binary';
        describe(`${method1}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
            it(`should return ${input.modPow}`, function () {
                for (let i = 0; i < ITERATIONS; i++) {
                    const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 0);
                    chai.expect(ret.toString()).equals(input.modPow.toString());
                }
            });
        });
        const method2 = 'Right-to-left binary';
        describe(`${method2}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
            it(`should return ${input.modPow}`, function () {
                for (let i = 0; i < ITERATIONS; i++) {
                    const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 1);
                    chai.expect(ret.toString()).equals(input.modPow.toString());
                }
            });
        });

        const bitOfK = [1, 2, 3, 4, 5, 6];
        const gPowers = [];
        const method3 = [];
        for (let j = 0; j < bitOfK.length; j++) {
            const baseBits = bitOfK[j];
            const base = BigInt(2) ** BigInt(baseBits);
            gPowers[j] = new Array(base);
            gPowers[j][0] = BigInt(1);
            gPowers[j][1] = input.g;
            for (let k = 2; k < base; k++) {
                gPowers[j][k] = (gPowers[j][k - 1] * input.g) % input.m;
            }
            method3[j] = `Left-to-right ${base}-ary`;
            describe(`${method3[j]}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
                it(`should return ${input.modPow}`, function () {
                    for (let i = 0; i < ITERATIONS; i++) {
                        const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 2, baseBits);
                        chai.expect(ret.toString()).equals(input.modPow.toString());
                    }
                });
            });
            describe(`${method3[j]}. Precomputed powers of g. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
                it(`should return ${input.modPow}`, function () {
                    for (let i = 0; i < ITERATIONS; i++) {
                        const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 2, baseBits, gPowers[j]);
                        chai.expect(ret.toString()).equals(input.modPow.toString());
                    }
                });
            });
        }

        const baseBitsArr = [256, 512];
        if (input.m % BigInt(2) === BigInt(1)) {
            for (let i = 0; i < baseBitsArr.length; i++) {
                const baseBits = baseBitsArr[i];
                const method4 = `Left-to-right + MontMul. Base bits=${baseBits}`;
                describe(`${method4}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
                    it(`should return ${input.modPow}`, function () {
                        for (let i = 0; i < ITERATIONS; i++) {
                            const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 3, baseBits);
                            chai.expect(ret.toString()).equals(input.modPow.toString());
                        }
                    });
                });
                const method5 = `Right-to-left + MontMul. Base bits=${baseBits}`;
                describe(`${method5}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
                    it(`should return ${input.modPow}`, function () {
                        for (let i = 0; i < ITERATIONS; i++) {
                            const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 4, baseBits);
                            chai.expect(ret.toString()).equals(input.modPow.toString());
                        }
                    });
                });
            }
            const method6 = 'Left-to-right + Redc.';
            describe(`${method6}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
                it(`should return ${input.modPow}`, function () {
                    for (let i = 0; i < ITERATIONS; i++) {
                        const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 5);
                        chai.expect(ret.toString()).equals(input.modPow.toString());
                    }
                });
            });
            const method7 = 'Right-to-left + Redc.';
            describe(`${method7}. ${ITERATIONS} iterations. modPow(${input.g}, ${input.e}, ${input.m})`, function () {
                it(`should return ${input.modPow}`, function () {
                    for (let i = 0; i < ITERATIONS; i++) {
                        const ret = bigintCryptoUtils.modPow(input.g, input.e, input.m, 6);
                        chai.expect(ret.toString()).equals(input.modPow.toString());
                    }
                });
            });
        }
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$6 = [
    {
        x: BigInt('2'),
        y: BigInt('512'),
        m: BigInt('1023')
    },
    {
        x: BigInt('24365122346356235624575757256436235623565662'),
        y: BigInt('972435123467572543534524524363462357543452328'),
        m: BigInt('994366340282366920938463463374607431768211455')
    },
    {
        x: BigInt('23578246824582562435213523625125115367135757157241436135715713461467157157534564567457568968596780432245724926715371376153715371537582468346724613557146815714362136846825411436162634'),
        y: BigInt('23452346257257255725757572457514361415713467143511346247552525252565672575474346713575753713467575371537537153156153634371537143656356537625613461435875935725613464351357258246826433'),
        m: BigInt('34625256245625252562562562522243656257475723472525257825421513453465372572467134613757879928061874561780674016745076267344567226707541510465051746350716345026843501611257257252575247')
    }
];

describe('montMul', function () {
    const ITERATIONS = 100;
    const baseBitsArr = [1, 2, 4, 8, 16, 32, 64, 128];

    for (const input of inputs$6) {
        for (const baseBits of baseBitsArr) {
            describe(`${ITERATIONS} iterations. Mont Mul(${input.x}, ${input.y}, ${input.m}, ${baseBits})`, function () {
                it('should return x*y*R^(-1) mod m', function () {
                    const output = (input.x * input.y) % input.m;

                    let iterations = ITERATIONS;
                    while (iterations > 0) {
                        const mont = new bigintCryptoUtils.Mont(input.m, baseBits);
                        const x = mont.mul(input.x, mont.Rsqr);
                        const y = mont.mul(input.y, mont.Rsqr);
                        let ret = mont.mul(x, y);
                        ret = mont.mul(ret, BigInt(1));
                        chai.expect(ret.toString()).equals(output.toString());
                        iterations--;
                    }
                });
            });
        }
        describe(`${ITERATIONS} iterations. Mont Redc(${input.x} * ${input.y}, ${input.m})`, function () {
            it('should return x*y*R^(-1) mod m', function () {
                const output = (input.x * input.y) % input.m;

                let iterations = ITERATIONS;
                while (iterations > 0) {
                    const mont = new bigintCryptoUtils.Mont(input.m);
                    const x = mont.redc(input.x * mont.Rsqr);
                    const y = mont.redc(input.y * mont.Rsqr);
                    let ret = mont.redc(x * y);
                    ret = mont.redc(ret);
                    chai.expect(ret.toString()).equals(output.toString());
                    iterations--;
                }
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const bitLengths = [
    256,
    512,
    1024,
    2048,
    3072,
    4096
];

describe('prime', function () {
    for (const bitLength of bitLengths) {
        describe(`prime(${bitLength})`, function () {
            it(`should return a random ${bitLength}-bits probable prime`, async function () {
                const prime = await bigintCryptoUtils.prime(bitLength);
                const primeBitLength = bigintCryptoUtils.bitLength(prime);
                chai.expect(primeBitLength).to.equal(bitLength);
            });
        });
    }
});

// For the browser test builder to work you MUST import them module in a variable that
// is the camelised version of the package name.



const inputs$7 = [
    {
        a: BigInt(1),
        n: BigInt(19),
        toZn: BigInt(1)
    },
    {
        a: BigInt(-25),
        n: BigInt(9),
        toZn: BigInt(2)
    },
    {
        a: BigInt('12359782465012847510249'),
        n: BigInt(5),
        toZn: BigInt(4)
    }
];

describe('toZn', function () {
    for (const input of inputs$7) {
        describe(`toZn(${input.a}, ${input.n})`, function () {
            it(`should return ${input.toZn}`, function () {
                const ret = bigintCryptoUtils.toZn(input.a, input.n);
                chai.expect(ret).to.equal(input.toZn);
            });
        });
    }
});
